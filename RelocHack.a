;  =========== Header ===========;  File:				RelocHack.a;  Project:				(Library);  Written by:			Paul Guyot (pguyot@kallisys.net); ;  Created on:			06/29/2001;  Internal version:	1; ; Copyright (c) 2001, Paul Guyot.; All rights reserved.;; Redistribution and use in source and binary forms, with or without; modification, are permitted provided that the following conditions; are met:;; * Redistributions of source code must retain the above copyright;   notice and the following disclaimer.; * Redistributions in binary form must reproduce the above;   copyright notice and the following disclaimer in the;   documentation and/or other materials provided with the;   distribution.; * Neither the name of Kallisys nor the names of its contributors;   may be used to endorse or promote products derived from this;   software without specific prior written permission.;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR; A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT; HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.;  ===========;  =========== Change History ===========;  06/29/2001	v1	[PG]	Creation of the file;  ===========; ======================================================================================================; extern void RelocVTableHack( ULong inObject, ULong inRelocVTableHackPtr, VTableFuncPtr inVTablePtr );; ======================================================================================================; Function to relocate the VTable.; Usage (in the constructor);	RelocVTableHack( (ULong) this, (ULong) &RelocVTableHack, &<VTABLE> );; where <VTABLE> is the symbol of the VTable. (__VTABLE__ & size of class name & class name)	AREA	RelocVTableHack__FUlT1PFv_v, CODE, READONLY	EXPORT	RelocVTableHack__FUlT1PFv_v		sub		r3, pc, #8		; pc is this line + 8	add		r2, r2, r3		; r2 is now inVTablePtr + &thisFunc	sub		r1, r2, r1		; r1 is now inVTablePtr + &thisFunc - inRelocVTableHackPtr	str		r1, [r0, #0]	; store the pointer of the copy of the vtable	mov		pc, lr			; return; ======================================================================================================; extern ULong RelocFuncPtrHack( ULong inRelocFuncPtrHack, ULong inFuncPtr );; ======================================================================================================; Function to relocate a func pointer.; Usage:;	ProcPtr myFuncPtr = (ProcPtr) RelocFuncPtrHack( (ULong) &RelocFuncPtrHack, (ULong) &myFunction );	AREA	RelocFuncPtrHack__FUlT1, CODE, READONLY	EXPORT	RelocFuncPtrHack__FUlT1		sub		r2, pc, #8		; pc is this line + 8	add		r1, r1, r2		; r1 is now inFuncPtr + &thisFunc	sub		r0, r1, r0		; r0 is now inFuncPtr + &thisFunc - inRelocFuncPtrHack							;	this is the result	mov		pc, lr			; return		END; ==================================================================; CCI Power 6/40: one board, a megabyte of cache, and an attitude...; ==================================================================